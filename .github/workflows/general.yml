name: Rust

on:
  push:
    branches:
      - "main"
      # PR作成時のみにCIを実行させるように修正
      # - "feature/*"
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - "main"
      - "feature/*"

env:
  CARGO_TERM_COLOR: always
  SQLX_VERSION: 0.6.3
  SQLX_FEATURES: "rustls,postgres"

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install the Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Rust Cache Action
        uses: Swatinem/rust-cache@v2
        with:
          key: sqlx-${{ env.SQLX_VERSION }}

      - name: Install sqlx-cli
        run: cargo install sqlx-cli
          --version=${{env.SQLX_VERSION}}
          --features ${{env.SQLX_FEATURES}}
          --no-default-features
          --locked

      - name: Install PostgreSQL client
        run: sudo apt update && sudo apt install postgresql-client -y

      - name: Migrate database
        run: SKIP_DOCKER=true ./scripts/init_db.sh

      - name: Copy DATABASE_URL env for testing
        run: mv .env.example .env

      - name: Check sqlx-data.json is up-to-date
        run: |
          cargo sqlx prepare --check -- --bin zero2prod

      - name: Run tests
        run: cargo test

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - name: Enforce formatting
        run: cargo fmt --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - uses: Swatinem/rust-cache@v2
        with:
          key: sqlx-${{ env.SQLX_VERSION }}
      - name: Install sqlx-cli
        run: cargo install sqlx-cli
          --version=${{ env.SQLX_VERSION }}
          --features ${{ env.SQLX_FEATURES }}
          --no-default-features
          --locked
      - name: Install postgresql-client
        run: sudo apt-get update && sudo apt-get install postgresql-client -y
      - name: Migrate database
        run: SKIP_DOCKER=true ./scripts/init_db.sh
      - name: generate .env
        run: cp .env.example .env
      - name: Linting
        run: cargo clippy -- -D warnings

  # https://github.com/xd009642/tarpaulin#github-actions
  #
  coverage:
    name: Code coverage
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    # container:
    #   image: xd009642/tarpaulin
    #   options: --security-opt seccomp=unconfined
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          key: sqlx-${{ env.SQLX_VERSION }}
      - name: Install sqlx-cli
        run: cargo install sqlx-cli
          --version=${{ env.SQLX_VERSION }}
          --features ${{ env.SQLX_FEATURES }}
          --no-default-features
          --locked
      - name: Install PostgreSQL client
        run: sudo apt update && sudo apt install postgresql-client -y
      - name: Migrate database
        run: SKIP_DOCKER=true ./scripts/init_db.sh
      - name: generate .env
        run: cp .env.example .env
      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin
      - name: Generate code coverage
        run: |
          cargo tarpaulin --verbose --workspace --out Xml
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v3
        with:
          # パブリックなリポジトリなのでトークン設定は不要
          # ただしRate Limitの課題にぶつかるためトークンを設定
          token: ${{secrets.CODECOV_TOKEN}}
          fail_ci_if_error: true
